
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.18.0
 * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
 */
Prisma.prismaVersion = {
  client: "2.18.0",
  engine: "da6fafb57b24e0b61ca20960c64e2d41f9e8cff1"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AreaOfWorksScalarFieldEnum = makeEnum({
  id: 'id',
  project_proposal_id: 'project_proposal_id',
  unit_location_id: 'unit_location_id',
  new_unit: 'new_unit',
  existing_unit: 'existing_unit',
  unit_alias: 'unit_alias',
  work_type: 'work_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.AttributesScalarFieldEnum = makeEnum({
  id: 'id',
  parent_id: 'parent_id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.AttributeUnitsScalarFieldEnum = makeEnum({
  id: 'id',
  attribute_parent_id: 'attribute_parent_id',
  unit_name: 'unit_name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.Backend_UsersScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.CitiesScalarFieldEnum = makeEnum({
  id: 'id',
  state_id: 'state_id',
  name: 'name',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ContractorsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  mobile: 'mobile',
  company_name: 'company_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.CountriesScalarFieldEnum = makeEnum({
  id: 'id',
  country_name: 'country_name',
  country_code: 'country_code',
  iso3: 'iso3',
  phone_code: 'phone_code',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProductAttributeUnitsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  product_id: 'product_id',
  attribute_id: 'attribute_id',
  attribute_unit_id: 'attribute_unit_id',
  html_element_type: 'html_element_type',
  display_order: 'display_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProductAttributeUnitValuesScalarFieldEnum = makeEnum({
  id: 'id',
  value: 'value',
  slug: 'slug',
  product_attribute_unit_id: 'product_attribute_unit_id',
  custom: 'custom',
  custom_html_element_type: 'custom_html_element_type',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProductCategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProductPropertyUnitsScalarFieldEnum = makeEnum({
  id: 'id',
  property_unit_id: 'property_unit_id',
  product_id: 'product_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProductsScalarFieldEnum = makeEnum({
  id: 'id',
  parent_id: 'parent_id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProjectProposalsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  project_id: 'project_id',
  proposal_status: 'proposal_status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProjectsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  property_address_id: 'property_address_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by',
  start_date: 'start_date'
});

exports.Prisma.ProjectTypeAssociationsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  project_type_id: 'project_type_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ProjectTypesScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyLevelsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyOwnersScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  mobile: 'mobile',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertySubTypesScalarFieldEnum = makeEnum({
  id: 'id',
  property_type_id: 'property_type_id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyUnitAttributesScalarFieldEnum = makeEnum({
  id: 'id',
  property_unit_id: 'property_unit_id',
  attribute_id: 'attribute_id',
  attribute_unit_id: 'attribute_unit_id',
  html_element_type: 'html_element_type',
  display_order: 'display_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyUnitProductCategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  property_unit_id: 'property_unit_id',
  product_category_id: 'product_category_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyUnitProductCategoryProductsScalarFieldEnum = makeEnum({
  id: 'id',
  property_unit_product_category_id: 'property_unit_product_category_id',
  product_id: 'product_id',
  display_order: 'display_order',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.PropertyUnitsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.Property_AddressesScalarFieldEnum = makeEnum({
  id: 'id',
  street: 'street',
  property_owner_id: 'property_owner_id',
  city_id: 'city_id',
  property_sub_type_id: 'property_sub_type_id',
  postal_code: 'postal_code',
  construction_type: 'construction_type',
  withBasement: 'withBasement',
  storyId: 'storyId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.Property_TypesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ScopeOfWorkPropertyUnitsScalarFieldEnum = makeEnum({
  id: 'id',
  project_proposal_id: 'project_proposal_id',
  area_of_work_id: 'area_of_work_id',
  property_unit_attribute_id: 'property_unit_attribute_id',
  value: 'value',
  attribute_custom_name: 'attribute_custom_name',
  attribute_custom_value: 'attribute_custom_value',
  attribute_custom_unit: 'attribute_custom_unit',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.ScopeOfWorksScalarFieldEnum = makeEnum({
  id: 'id',
  project_proposal_id: 'project_proposal_id',
  area_of_work_id: 'area_of_work_id',
  product_attribute_unit_id: 'product_attribute_unit_id',
  product_attribute_unit_value_id: 'product_attribute_unit_value_id',
  attribute_custom_name: 'attribute_custom_name',
  attribute_custom_value: 'attribute_custom_value',
  attribute_custom_unit: 'attribute_custom_unit',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.SequelizeMetaScalarFieldEnum = makeEnum({
  name: 'name'
});

exports.Prisma.StatesScalarFieldEnum = makeEnum({
  id: 'id',
  country_id: 'country_id',
  name: 'name',
  state_code: 'state_code',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.UnitLocationsScalarFieldEnum = makeEnum({
  id: 'id',
  unit_name: 'unit_name',
  property_sub_type_id: 'property_sub_type_id',
  property_level_id: 'property_level_id',
  property_unit_id: 'property_unit_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  user_type: 'user_type',
  email: 'email',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by: 'created_by',
  updated_by: 'updated_by',
  username: 'username',
  email_verified: 'email_verified',
  name: 'name'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  AreaOfWorks: 'AreaOfWorks',
  Attributes: 'Attributes',
  AttributeUnits: 'AttributeUnits',
  Backend_Users: 'Backend_Users',
  Cities: 'Cities',
  Contractors: 'Contractors',
  Countries: 'Countries',
  ProductAttributeUnits: 'ProductAttributeUnits',
  ProductAttributeUnitValues: 'ProductAttributeUnitValues',
  ProductCategories: 'ProductCategories',
  ProductPropertyUnits: 'ProductPropertyUnits',
  Products: 'Products',
  ProjectProposals: 'ProjectProposals',
  Projects: 'Projects',
  ProjectTypeAssociations: 'ProjectTypeAssociations',
  ProjectTypes: 'ProjectTypes',
  PropertyLevels: 'PropertyLevels',
  PropertyOwners: 'PropertyOwners',
  PropertySubTypes: 'PropertySubTypes',
  PropertyUnitAttributes: 'PropertyUnitAttributes',
  PropertyUnitProductCategories: 'PropertyUnitProductCategories',
  PropertyUnitProductCategoryProducts: 'PropertyUnitProductCategoryProducts',
  PropertyUnits: 'PropertyUnits',
  Property_Addresses: 'Property_Addresses',
  Property_Types: 'Property_Types',
  ScopeOfWorkPropertyUnits: 'ScopeOfWorkPropertyUnits',
  ScopeOfWorks: 'ScopeOfWorks',
  SequelizeMeta: 'SequelizeMeta',
  States: 'States',
  UnitLocations: 'UnitLocations',
  Users: 'Users'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
